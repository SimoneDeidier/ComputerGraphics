#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec2 fragUV;layout(location = 2) in vec3 fragNormal;layout(binding = 1) uniform sampler2D tex;layout(binding = 2) uniform GlobalUniformBufferObject {    vec4 lightPos;    vec4 lightCol;    vec4 eyePos;} gubo;layout(location = 0) out vec4 outColor;void main() {	vec3 norm = normalize(fragNormal);	vec3 viewerDir = normalize(gubo.eyePos.xyz - fragPos);	vec3 albedo = texture(tex, fragUV).rgb;	vec3 lightDir = normalize(gubo.lightPos.xyz - fragPos);	vec3 lightColor = gubo.lightCol.rgb;	vec3 diffuse = albedo * clamp(dot(norm, lightDir), 0.0, 1.0);	vec3 specular = 1.0 * vec3(pow(clamp(dot(norm, normalize(viewerDir + lightDir)), 0.0, 1.0), 128.0));    vec3 brdf = diffuse + specular;    outColor = vec4(lightColor * brdf + albedo * 0.05, 1.0);}